/** * Created by jerry on 16/8/2. */(function (TrackLog) {	'use strict';	var SDK_VERSION = "1.0.1";	var SDK_NAME = "javascript_native_web";	var inited = false,		urlParseRE = /^(((([^:\/#\?]+:)?(?:(\/\/)((?:(([^:@\/#\?]+)(?:\:([^:@\/#\?]+))?)@)?(([^:\/#\?\]\[]+|\[[^\/\]@#?]+\])(?:\:([0-9]+))?))?)?)?((\/?(?:[^\/\?#]+\/+)*)([^\?#]*)))?(\?[^#]+)?)(#.*)?/,		trackTime = true,		startTime;	var zyTracking = {		params: {},		paramsTempObj: {},		//common params		CM_PARAMS: {			CM_URL: "_uri", //当前页面URL			CM_TITLE: "_tit", //页面标题			CM_REFERRER: "_ref", //页面来源			CM_SC: "_scr", //屏幕分辨率			CM_CD: "_scc", //屏幕颜色			CM_LANG: "_lan", //浏览器语言			CM_UAT: "_uat", //brower userAgent info  //服务端配置过了。不需要在设置			CM_JA: "_jar", //是否启用Java			CM_RD: "_rdm", //随机时间戳客户端			CM_TYPE: "_type",			CM_INFO: "_info",			CM_IMG_SRC: "h5track.jollychic.com/_h5track.gif"}	};	/**	 * url json	 */	var jsonUrlParams = function (url) {		this.url = url;		this.params = {}; //url参数对象		this.init();	};	jsonUrlParams.prototype = {		init: function () {			var str = this.url;			if (str) {				var index = str.indexOf("?");				//修复有#号的bug				if (index > 0) {					str = str.substr(index);					index = str.indexOf("?");				}				if (index === 0) {					str = str.substr(index + 1);					//eg.?utm_source=newsletter%26utm_medium=email%26utm_campaign=newsletter20130507_brands&mailid=ZC3715-FHD2XDx~XjSnZQVUmOlRL35&spam=0					var sKey = encodeURIComponent("&");					var parts = str.split(sKey);					for (var i = 0, len = parts.length; i < len; i++) {						var kv = parts[i];						if (kv.indexOf("&") > 0) {							var keys = parts[i].split("&");							for (var j = 0, l = keys.length; j < l; j++) {								var key = keys[j].split("=");								this.params[key[0]] = key[1];							}						} else {							var key = kv.split("=");							this.params[key[0]] = key[1];						}					}				}			}		},		//get value		get: function (key) {			return this.params[key];		}	};	//url正则	TrackLog.urlRegEx = function (url) {		var arr = url.match(urlParseRE);		return arr;	};	TrackLog.getUrlPath = function (url, domain) {		var arr = TrackLog.urlRegEx(url);		var path = (arr[14] ? arr[14] : "") + (arr[15] ? arr[15] : "") + (arr[16] ? arr[16] : "") + (arr[17] ? arr[17] : "");		if (domain) {			path = arr[0] ? arr[0] : "";		}		return path;	};	/**	 * 通用数据	 */	TrackLog.commonData = function () {		if (document) {			var thisUrl = new jsonUrlParams(document.URL);			zyTracking.params[zyTracking.CM_PARAMS.CM_URL] = TrackLog.getUrlPath(thisUrl.url, true);			zyTracking.params[zyTracking.CM_PARAMS.CM_TITLE] = document.title;			zyTracking.params[zyTracking.CM_PARAMS.CM_REFERRER] = document.referrer;		}		//about window info		if (window && window.screen) {			var sc = window.screen.width || 0,				sh = window.screen.height || 0;			zyTracking.params[zyTracking.CM_PARAMS.CM_SC] = sc + " x " + sh || 0;			zyTracking.params[zyTracking.CM_PARAMS.CM_CD] = (window.screen.colorDepth || 0) + "-bit" || 0;		}		//about navigator info		if (navigator) {			//language			if (navigator.language) {				zyTracking.params[zyTracking.CM_PARAMS.CM_LANG] = navigator.language;			} else if (navigator.browserLanguage) {				zyTracking.params[zyTracking.CM_PARAMS.CM_LANG] = navigator.browserLanguage.toLowerCase();			}			//服务端存在不需要在设置			//zyTracking.params[zyTracking.CM_PARAMS.CM_UAT] = navigator.userAgent.toLowerCase();			//java			zyTracking.params[zyTracking.CM_PARAMS.CM_JA] = (navigator.javaEnabled()) ? true : false;		}	};	/**	 * 初始化	 * @param ob	 */	TrackLog.init = function (ob) {		if (!inited) {			startTime = getTimestamp();			inited = true;			var obj = ob || {};			if (TrackLog.q.constructor !== Array) {				TrackLog.q = []			}			TrackLog.commonData();			TrackLog.eventUpdate(obj);			TrackLog.heartBeat();		}	};	/**	 * 数据更新	 * @param obj	 */	TrackLog.eventUpdate = function (obj) {		zyTracking.params[zyTracking.CM_PARAMS.CM_TYPE] = obj[zyTracking.CM_PARAMS.CM_TYPE] || "pv";		//ob.info {"log_title":1,"log_content":2}		zyTracking.params[zyTracking.CM_PARAMS.CM_INFO] = deepCopy(obj[zyTracking.CM_PARAMS.CM_INFO]) || {};	};	/**	 * 核心进程处理	 */	TrackLog.heartBeat = function () {		//process queue		if (typeof TrackLog.q !== "undefined" && TrackLog.q.length > 0) {			var req;			for (var i = 0; i < TrackLog.q.length; i++) {				req = TrackLog.q[i];				if (typeof req === "function") {					req();				} else if (req.constructor === Array && req.length > 0) {					if (typeof TrackLog[req[0]] !== "undefined") {						TrackLog[req[0]].apply(null, req.slice(1));					}				}			}			TrackLog.q = [];		}	};	/**	 * 发送日志	 * @param ob	 * @param bool	 */	TrackLog.trackLogSend = function (ob, bool) {		var paramsObj = zyTracking.params;		var params = "";		var obj = ob || {};		if (bool) {			TrackLog.eventUpdate(obj);		}		for (var key in paramsObj) {			if (paramsObj.hasOwnProperty(key) && paramsObj[key]) {				if (key != zyTracking.CM_PARAMS.CM_INFO) {					params += key + "=" + encodeURIComponent(paramsObj[key]);					params += "&";				}				if (key == zyTracking.CM_PARAMS.CM_INFO) {					var tempObj = paramsObj[key];					for (var k in tempObj) {						if (tempObj.hasOwnProperty(k)) {							params += zyTracking.CM_PARAMS.CM_INFO + "_" + k + "=" + encodeURIComponent(tempObj[k]);							params += "&";						}					}				}			}		}		var index = params.lastIndexOf('&');		params = params.substr(0, index);		TrackLog.sendImageRequest(params);	};	/**	 * 发送图片请求	 * @param params	 */	TrackLog.sendImageRequest = function (params) {		var win = window;		var n = '_jsImage_' + strNewGuid(16);		var img = win[n] = new Image(1, 1);		var http = ("https:" == document.location.protocol) ? "https://" : "http://";		img.onload = img.onerror = function () {			win[n] = null;		};		img.src = http + zyTracking.CM_PARAMS.CM_IMG_SRC + "?" + params + "&" + zyTracking.CM_PARAMS.CM_RD + "=" + (new Date).getTime();	};	TrackLog.init();	//get current timestamp	function getTimestamp() {		return Math.floor(new Date().getTime() / 1000);	}    //拷贝对象;	function deepCopy(source) {		var result = {};		for (var key in source) {			result[key] = typeof source[key] === 'object' ? deepCopy(source[key]) : source[key];		}		return result;	}	//get guid	function strNewGuid(num) {		var guid = "";		if (num === 16) {			for (var i = 1; i <= 16; i++) {				var n = Math.floor(Math.random() * 16.0).toString(16);				guid += n;				if ((i == 8) || (i == 12) || (i == 16)) {					guid += "";				}			}		}		if (num === 32) {			for (var i = 1; i <= 32; i++) {				var n = Math.floor(Math.random() * 16.0).toString(16);				guid += n;				if ((i == 8) || (i == 12) || (i == 16) || (i == 32)) {					guid += "";				}			}		}		return guid;	}})(window.TrackLog = window.TrackLog || {});